#!/usr/bin/env python3
"""
Performance Test Script for BlurViewer
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–π
"""

import time
import sys
import os
from pathlib import Path
import psutil
import subprocess
from typing import List, Dict, Tuple

def get_memory_usage() -> float:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –ú–ë"""
    process = psutil.Process()
    return process.memory_info().rss / 1024 / 1024

def get_cpu_usage() -> float:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –≤ %"""
    return psutil.cpu_percent(interval=0.1)

def find_test_images(directory: str, max_count: int = 10) -> List[str]:
    """–ù–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.gif', '.webp', '.tiff', '.tif'}
    image_files = []
    
    try:
        for file_path in Path(directory).iterdir():
            if file_path.is_file() and file_path.suffix.lower() in image_extensions:
                image_files.append(str(file_path))
                if len(image_files) >= max_count:
                    break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    
    return image_files

def run_performance_test(script_path: str, test_images: List[str]) -> Dict[str, float]:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {script_path}")
    
    results = {
        'startup_time': 0.0,
        'memory_usage': 0.0,
        'cpu_usage': 0.0,
        'navigation_time': 0.0
    }
    
    try:
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = subprocess.Popen([
            sys.executable, script_path, test_images[0] if test_images else ""
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(2)
        
        # –ò–∑–º–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        try:
            proc = psutil.Process(process.pid)
            results['memory_usage'] = proc.memory_info().rss / 1024 / 1024
            results['cpu_usage'] = proc.cpu_percent(interval=0.5)
        except psutil.NoSuchProcess:
            pass
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process.terminate()
        process.wait(timeout=5)
        
        results['startup_time'] = time.time() - start_time
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {script_path}: {e}")
    
    return results

def print_results(original_results: Dict[str, float], optimized_results: Dict[str, float]):
    """–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*60)
    
    metrics = {
        'startup_time': ('–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (—Å)', '–º–µ–Ω—å—à–µ –ª—É—á—à–µ'),
        'memory_usage': ('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–ú–ë)', '–º–µ–Ω—å—à–µ –ª—É—á—à–µ'),
        'cpu_usage': ('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU (%)', '–º–µ–Ω—å—à–µ –ª—É—á—à–µ')
    }
    
    for metric, (name, description) in metrics.items():
        original_val = original_results.get(metric, 0)
        optimized_val = optimized_results.get(metric, 0)
        
        if original_val > 0 and optimized_val > 0:
            improvement = ((original_val - optimized_val) / original_val) * 100
            status = "‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï" if improvement > 0 else "‚ùå –£–•–£–î–®–ï–ù–ò–ï"
            
            print(f"\n{name}:")
            print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {original_val:.2f}")
            print(f"  –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {optimized_val:.2f}")
            print(f"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {improvement:+.1f}% {status}")
        else:
            print(f"\n{name}: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò BLURVIEWER")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    original_script = "BlurViewer.py"
    optimized_script = "BlurViewer_Optimized.py"
    
    if not os.path.exists(original_script):
        print(f"‚ùå –§–∞–π–ª {original_script} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if not os.path.exists(optimized_script):
        print(f"‚ùå –§–∞–π–ª {optimized_script} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_directory = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    test_images = []
    if test_directory and os.path.exists(test_directory):
        test_images = find_test_images(test_directory, max_count=5)
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(test_images)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    else:
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print("\nüîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    original_results = run_performance_test(original_script, test_images)
    optimized_results = run_performance_test(optimized_script, test_images)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_results(original_results, optimized_results)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "="*60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("="*60)
    
    if optimized_results.get('memory_usage', 0) > original_results.get('memory_usage', 0):
        print("‚ö†Ô∏è  –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏ –∏–∑-–∑–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    
    if optimized_results.get('startup_time', 0) < original_results.get('startup_time', 0):
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ")
    
    print("\nüìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements_optimized.txt")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤")
    print("4. –û—Ü–µ–Ω–∏—Ç–µ –ø–ª–∞–≤–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–π")

if __name__ == "__main__":
    main()